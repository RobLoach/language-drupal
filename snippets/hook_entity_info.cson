'.text.drupal':
  'hook_entity_info':
    'prefix': 'hook_entity_info'
    'body': '/**\n * Implements hook_entity_info().\n */\nfunction $1_entity_info() {\n  /*\n   *  \$return = array(\n   *    \'node\' => array(\n   *      \'label\' => t(\'Node\'),\n   *      \'controller class\' => \'NodeController\',\n   *      \'base table\' => \'node\',\n   *      \'revision table\' => \'node_revision\',\n   *      \'uri callback\' => \'node_uri\',\n   *      \'fieldable\' => TRUE,\n   *      \'translation\' => array(\n   *        \'locale\' => TRUE,\n   *      ),\n   *      \'entity keys\' => array(\n   *        \'id\' => \'nid\',\n   *        \'revision\' => \'vid\',\n   *        \'bundle\' => \'type\',\n   *      ),\n   *      \'bundle keys\' => array(\n   *        \'bundle\' => \'type\',\n   *      ),\n   *      \'bundles\' => array(),\n   *      \'view modes\' => array(\n   *        \'full\' => array(\n   *          \'label\' => t(\'Full content\'),\n   *          \'custom settings\' => FALSE,\n   *        ),\n   *        \'teaser\' => array(\n   *          \'label\' => t(\'Teaser\'),\n   *          \'custom settings\' => TRUE,\n   *        ),\n   *        \'rss\' => array(\n   *          \'label\' => t(\'RSS\'),\n   *          \'custom settings\' => FALSE,\n   *        ),\n   *      ),\n   *    ),\n   *  );\n   *\n   *  // Search integration is provided by node.module, so search-related\n   *  // view modes for nodes are defined here and not in search.module.\n   *  if (module_exists(\'search\')) {\n   *    \$return[\'node\'][\'view modes\'] += array(\n   *      \'search_index\' => array(\n   *        \'label\' => t(\'Search index\'),\n   *        \'custom settings\' => FALSE,\n   *      ),\n   *      \'search_result\' => array(\n   *        \'label\' => t(\'Search result\'),\n   *        \'custom settings\' => FALSE,\n   *      ),\n   *    );\n   *  }\n   *\n   *  // Bundles must provide a human readable name so we can create help and error\n   *  // messages, and the path to attach Field admin pages to.\n   *  foreach (node_type_get_names() as \$type => \$name) {\n   *    \$return[\'node\'][\'bundles\'][\$type] = array(\n   *      \'label\' => \$name,\n   *      \'admin\' => array(\n   *        \'path\' => \'admin/structure/types/manage/%node_type\',\n   *        \'real path\' => \'admin/structure/types/manage/\' . str_replace(\'_\', \'-\', \$type),\n   *        \'bundle argument\' => 4,\n   *        \'access arguments\' => array(\'administer content types\'),\n   *      ),\n   *    );\n   *  }\n   */\n    \'${1}\' => array(\n      \'label\' => t(\'${2}\'),\n      \'controller class\' => \'${3}\',\n      \'base table\' => \'${4}\',\n      \'revision table\' => \'${5}\',\n      \'uri callback\' => \'${6}\',\n      \'fieldable\' => ${7},\n      \'translation\' => array(\n        \'locale\' => ${8},\n      ),\n      \'entity keys\' => array(\n        \'id\' => \'${9}\',\n        \'revision\' => \'${10}\',\n        \'bundle\' => \'${11}\',\n      ),\n      \'bundle keys\' => array(\n        \'bundle\' => \'${12}\',\n      ),\n      \'bundles\' => array(),\n      \'view modes\' => array(\n        \'${13}\' => array(\n          \'label\' => t(\'${14}\'),\n          \'custom settings\' => ${15},\n        ),\n      ),\n    ),\n  );\n  return \$return;\n}'