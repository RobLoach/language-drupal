'.text.drupal':
  'hook_install_tasks':
    'prefix': 'hook_install_tasks'
    'body': '/**\n * Implements hook_install_tasks().\n */\nfunction $1_install_tasks() {\n  // Here, we define a variable to allow tasks to indicate that a particular,\n  // processor-intensive batch process needs to be triggered later on in the\n  // installation.\n  /*\n   *\$myprofile_needs_batch_processing = variable_get(\'myprofile_needs_batch_processing\', FALSE);\n   *\$tasks = array(\n   *  // This is an example of a task that defines a form which the user who is\n   *  // installing the site will be asked to fill out. To implement this task,\n   *  // your profile would define a function named myprofile_data_import_form()\n   *  // as a normal form API callback function, with associated validation and\n   *  // submit handlers. In the submit handler, in addition to saving whatever\n   *  // other data you have collected from the user, you might also call\n   *  // variable_set(\'myprofile_needs_batch_processing\', TRUE) if the user has\n   *  // entered data which requires that batch processing will need to occur\n   *  // later on.\n   *  \'myprofile_data_import_form\' => array(\n   *    \'display_name\' => st(\'Data import options\'),\n   *    \'type\' => \'form\',\n   *  ),\n   *  // Similarly, to implement this task, your profile would define a function\n   *  // named myprofile_settings_form() with associated validation and submit\n   *  // handlers. This form might be used to collect and save additional\n   *  // information from the user that your profile needs. There are no extra\n   *  // steps required for your profile to act as an "installation wizard"; you\n   *  // can simply define as many tasks of type \'form\' as you wish to execute,\n   *  // and the forms will be presented to the user, one after another.\n   *  \'myprofile_settings_form\' => array(\n   *    \'display_name\' => st(\'Additional options\'),\n   *    \'type\' => \'form\',\n   *  ),\n   *  // This is an example of a task that performs batch operations. To\n   *  // implement this task, your profile would define a function named\n   *  // myprofile_batch_processing() which returns a batch API array definition\n   *  // that the installer will use to execute your batch operations. Due to the\n   *  // \'myprofile_needs_batch_processing\' variable used here, this task will be\n   *  // hidden and skipped unless your profile set it to TRUE in one of the\n   *  // previous tasks.\n   *  \'myprofile_batch_processing\' => array(\n   *    \'display_name\' => st(\'Import additional data\'),\n   *    \'display\' => \$myprofile_needs_batch_processing,\n   *    \'type\' => \'batch\',\n   *    \'run\' => \$myprofile_needs_batch_processing ? INSTALL_TASK_RUN_IF_NOT_COMPLETED : INSTALL_TASK_SKIP,\n   *  ),\n   *  // This is an example of a task that will not be displayed in the list that\n   *  // the user sees. To implement this task, your profile would define a\n   *  // function named myprofile_final_site_setup(), in which additional,\n   *  // automated site setup operations would be performed. Since this is the\n   *  // last task defined by your profile, you should also use this function to\n   *  // call variable_del(\'myprofile_needs_batch_processing\') and clean up the\n   *  // variable that was used above. If you want the user to pass to the final\n   *  // Drupal installation tasks uninterrupted, return no output from this\n   *  // function. Otherwise, return themed output that the user will see (for\n   *  // example, a confirmation page explaining that your profile\'s tasks are\n   *  // complete, with a link to reload the current page and therefore pass on\n   *  // to the final Drupal installation tasks when the user is ready to do so).\n   *  \'myprofile_final_site_setup\' => array(\n   *  ),\n   *);\n   */\n  \$tasks = array(\n    ${1:/* Your code here */}\n  );\n  return \$tasks;\n}'