'.text.drupal':
  'hook_field_update_forbid':
    'prefix': 'hook_field_update_forbid'
    'body': '/**\n * Implements hook_field_update_forbid().\n */\nfunction $1_field_update_forbid(\$field, \$prior_field, \$has_data) {\n  // A \'list\' field stores integer keys mapped to display values. If\n  // the new field will have fewer values, and any data exists for the\n  // abandoned keys, the field will have no way to display them. So,\n  // forbid such an update.\n  /*\n   *if (\$has_data && count(\$field[\'settings\'][\'allowed_values\']) < count(\$prior_field[\'settings\'][\'allowed_values\'])) {\n   *  // Identify the keys that will be lost.\n   *  \$lost_keys = array_diff(array_keys(\$field[\'settings\'][\'allowed_values\']), array_keys(\$prior_field[\'settings\'][\'allowed_values\']));\n   *  // If any data exist for those keys, forbid the update.\n   *  \$query = new EntityFieldQuery();\n   *  \$found = \$query\n   *    ->fieldCondition(\$prior_field[\'field_name\'], \'value\', \$lost_keys)\n   *    ->range(0, 1)\n   *    ->execute();\n   *  if (\$found) {\n   *    throw new FieldUpdateForbiddenException("Cannot update a list field not to include keys with existing data");\n   *  }\n   *}\n   */\n  ${1:/* Your code here */}\n}'